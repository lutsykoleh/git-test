1. 
`git commit --amend` - ця команда використовується для редагування комміту. За допомогою цієї команди можна змінити назву комміту після його створення (наприклад, після `git commit -m "text"`). Можна ввести цю команду, і в текстовому редакторі терміналу відредагувати текст комміту.
`git reset --hard` - ця команда скидає поточну гілку до вказаного комміту. Можна вказати як конкретну гілку (її хеш), так і `HEAD~{num}`, щоб перемістити на вказану кількість коммітів назад.

2. 
`git reset --hard ORIG_HEAD` - ORIG_HEAD дозволяє скинути стан гілки до команди `git reset` або `git merge`.

3. 
`git reflog` - ця команда дозволяє переглянути історію комітів та переміщення комітів.
`git cherry-pick` - ця команда дозволяє взяти коміт з однієї гілки та перемістити його на іншу гілку.

4. 
`git tag` - ця команда використовується для створення тегів у репозиторії. Часто використовується для вказання версії релізу. Можна створювати теги як до комміту, так і після нього. Але при створенні тегу до комміту, що вже був, потрібно додати `-a` і хеш комміту. Також теги мають особливість: звичайний пуш не відправить їх на віддалене середовище, для цього потрібно писати команду `git push origin <назва тегу>`.

5. 
`git fork` - ця команда створює копію репозиторію на обліковому записі, наприклад GitHub. Зазвичай використовується, щоб внести зміни до проекту, не впливаючи на оригінальний репозиторій.
`git branch` - ця команда використовується для керування гілками. За допомогою цієї команди та приставок можна змінювати, створювати, видаляти тощо гілки. Гілки дуже зручні в розробці, тому що є можливість у кожного мати своє середовище та працювати на ньому, не залежачи від інших.
`git clone` - ця команда створює локальну копію проекту на комп'ютері. Разом з файлами проекту у папку імпортуються гілки, які є на репозиторії, та комміти.

6. 
`Pull Request` - дослівно це прохання зробити `git pull` у репозиторій. Один програміст робить якісь зміни у проекті і хоче їх замерджити у основну гілку. Він створює пул-реквест на мердж зі своєї гілки на основну гілку (main, master), і потім цей пул-реквест перевіряється іншим спеціалістом, який вирішує, чи можна мерджити ці зміни у основну гілку, чи пул-реквест потребує допрацювання.

7. 
`git fetch` - ця команда завантажує зміни з віддаленого репозиторію, але не об'єднує дані з поточною гілкою. Ця команда зручна, коли потрібно дізнатися про зміни у віддаленому репозиторії без ризику автоматичного об'єднання.
`git pull` - ця команда завантажує зміни з віддаленого репозиторію і об'єднує дані з поточною гілкою. Це зручно, коли потрібно швидко отримати зміни і об'єднати їх.

8. 
`git stash` - ця команда дозволяє зберегти зміни у сховищі. Це зручно, коли працюєш над задачею, але потрібно переключитися на іншу гілку, щоб внести туди зміни. За замовчуванням це не дозволяється через незбережені зміни, але команда `git stash` дозволить зберегти їх локально без комміту, і далі переключатися між гілками.